{
  "hash": "ee4ca16d5effb01637005791eb7c8faf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Day 17\"\ntitle-slide-attributes:\n  data-background-image: images/lake.jpg\n  data-background-size: contain\n  data-background-opacity: \"0.5\"\nsubtitle: \"Math 216: Statistical Thinking\"\nauthor: \"Bastola\"\nformat:\n  revealjs:\n    html-math-method: mathjax\n    mathjax-url: \"https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.2.2/MathJax.js\" \n    theme: [default, scss/main.scss]\n    slide-number: true\n    preview-links: auto\n    history: true\n    chalkboard: \n      src: drawings.json\n    transition: slide\n    background-transition: fade    \n    touch: false\n    controls: true\n---\n\n\n\n\n\n## Recap: Steel Sheets Thickness{.font80}\n\n\n::: cle13\n\n- **Context**: We revisit the scenario from Section 6.1 where a steel manufacturer's rolling machine produces sheets of varying thickness, distributed uniformly between 150 and 200 millimeters.\n- **Experiment Setup**: Random sampling of 11 steel sheets to measure thickness, repeated across 1000 samples.\n\n\n:::\n\n\n## Example 6.1 {.font80}\n\n\n![](images/example6.1.png)\n\n## Sampling distribution for $\\bar{x}$ {.font80}\n\n![](images/hist6.1.png)\n\n## Uniform Distribution Parameters {.font80}\n\n::: cle6\n\n- **Distribution Type**: Uniform, with each value between 150 and 200 mm equally likely.\n- **Calculated Mean**: $\\mu = \\frac{150 + 200}{2} = 175$ mm.\n- **Calculated Standard Deviation**: $\\sigma = \\sqrt{\\frac{(200 - 150)^2}{12}} \\approx 14.43$ mm.\n\n\n:::\n\n\n## Sample Mean and Estimation {.font80}\n\n\n::: cle10\n\n- **Sample Mean**: $\\bar{x} = \\frac{\\sum x}{11}$\n- **Role of Sample Mean**: Serves as a better statistic to approximate the population mean, especially useful when population parameters are unknown.\n- **Unbiased Estimator**: $\\bar{X} = \\frac{1}{n} \\sum X_i$ is unbiased, meaning $E(\\bar{x}) = \\mu$.\n\n:::\n\n\n## Properties of the Sampling Distribution {.font70}\n\n\n::: cle6\n- **Mean of Sampling Distribution**: Equals the population mean, i.e., $E(\\bar{x}) = \\mu$.\n- **Standard Error of the Mean (SE)**: $\\sigma_{\\bar{x}} = \\frac{\\sigma}{\\sqrt{n}}$ for sample size \\(n\\).\n- **Implication**: The standard error quantifies the spread of the sampling distribution around the population mean.\n\n:::\n\n\n\n## Central Limit Theorem (CLT) {.font80}\n\n::: cle15\n\n- **Theorem Statement**: For any population with mean $\\mu$ and standard deviation $\\sigma$, the sampling distribution of the sample mean $\\bar{x}$ will be approximately normal if the sample size $n$ is sufficiently large (typically $n \\geq 30$).\n- **Application**: This theorem applies regardless of the original population's distribution, making it a powerful tool in statistical inference.\n\n\n:::\n\n## Impact of Sample Size {.font80}\n\n::: cle11\n- **Visualization**: Tells us how increasing sample size narrows the spread of the sampling distribution, aligning closer to a normal distribution.\n- **Practical Implication**: Larger sample sizes lead to more precise estimations of the population mean, emphasizing the importance of sample size in experimental design.\n\n:::\n\n\n## \n\n\n![](images/various_sampling_distr.png){width=300px}\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}